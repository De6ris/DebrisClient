import java.text.SimpleDateFormat

plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

repositories {
    maven { url = 'https://masa.dy.fi/maven' }
    maven { url = "https://www.cursemaven.com" }
    maven { url = "https://maven.terraformersmc.com/releases" }
    maven {
        url "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup "io.github.cottonmc"
        }
    }
    maven {
        url 'https://maven.fallenbreath.me/releases'
    }
    maven {
        url 'https://jitpack.io'
    }
    maven {
        url = 'https://maven.xpple.dev/maven2'
    }
    repositories {
        maven { url = "https://maven.bawnorton.com/releases" }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    //masa
//    implementation "com.github.sakura-ryoko:malilib:${project.malilib_version}"
//    implementation "com.github.sakura-ryoko:litematica:${project.litematica_version}"
//    implementation "com.github.sakura-ryoko:itemscroller:${project.itemscroller_version}"
//    implementation "com.github.sakura-ryoko:tweakeroo:${project.tweakeroo_version}"
//    implementation "com.github.sakura-ryoko:minihud:${project.minihud_version}"
    modImplementation(files("libs\\malilib-fabric-1.21.4-0.23.0.jar"))
    modImplementation(files("libs\\litematica-fabric-1.21.4-0.21.0.jar"))
    modImplementation(files("libs\\itemscroller-fabric-1.21.4-0.26.0.jar"))
    modImplementation(files("libs\\tweakeroo-fabric-1.21.4-0.23.0.jar"))
    modImplementation(files("libs\\minihud-fabric-1.21.4-0.34.2.jar"))


    //misc
    modImplementation "curse.maven:roughly-enough-items-${project.rei_projectid}:${project.rei_fileid}"
    modImplementation "curse.maven:worldedit-${project.worldedit_projectid}:${project.worldedit_fileid}"

    modImplementation "com.terraformersmc:modmenu:${project.mod_menu}"

    modImplementation(files("libs\\fabric-carpet-1.21.4-1.4.161+v241203.jar"))

    modImplementation("dev.xpple:clientarguments:${project.clientarguments_version}")
//    modImplementation "io.github.cottonmc:Jankson-Fabric:${project.jankson_version}"
//
//    modImplementation("io.github.cottonmc:Jankson-Fabric:${project.jankson_version}")
//    modImplementation("io.github.juuxel:libninepatch:${project.libninepatch_version}")
//    modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}")
//    modImplementation("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")

//    implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0"))
//    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.2.0")))
//    include "io.github.cottonmc:Jankson-Fabric:${project.jankson_version}"
//
//    include api("io.github.juuxel:libninepatch:${project.libninepatch_version}")
//
//
//    include(modImplementation("me.fallenbreath:conditional-mixin-fabric:${project.conditionalmixin_version}"))
//    include(annotationProcessor(implementation("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
    modCompileOnly(files("libs\\magiclib-minecraft-api-mc1.21-fabric-0.6.67-beta.jar"))
    modCompileOnly(files("libs\\LibGui-12.0.1+1.21.2.jar"))
    modCompileOnly(files("libs\\CommandGUIButtons-mc1.21-2.3.0+build.235+bb785b5.jar"))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    version += "-mc" + project.minecraft_version + "-" + new SimpleDateFormat("yyyyMMdd").format(new Date())
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

loom {
    accessWidenerPath = file("src/main/resources/DebrisClient.accesswidener")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
